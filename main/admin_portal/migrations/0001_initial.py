# Generated by Django 5.0.4 on 2024-04-17 17:23

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Students',
            fields=[
                ('roll_number', models.CharField(max_length=15, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=35)),
                ('course', models.CharField(max_length=10)),
                ('category', models.CharField(max_length=15)),
                ('department', models.CharField(max_length=10)),
                ('base_tuition_fee', models.IntegerField()),
                ('insurance_fee', models.IntegerField()),
                ('examination_fee', models.IntegerField()),
                ('registration_fee', models.IntegerField()),
                ('gymkhana_fee', models.IntegerField()),
                ('medical_fee', models.IntegerField()),
                ('student_benevolent_fund', models.IntegerField()),
                ('lab_fee', models.IntegerField()),
                ('semester_mess_advance', models.IntegerField()),
                ('one_time_fee', models.IntegerField()),
                ('refundable_security_deposit', models.IntegerField()),
                ('accommodation_charges', models.IntegerField()),
                ('student_welfare_fund', models.IntegerField()),
                ('mess_rebate', models.IntegerField(default=0)),
                ('fee_arrear', models.IntegerField(default=0)),
                ('fee_paid', models.IntegerField(default=0)),
                ('tuition_fee', models.IntegerField(default=0)),
                ('total_fee', models.IntegerField(default=0)),
                ('fee_payable', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='FeeStructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.CharField(max_length=10)),
                ('category', models.CharField(max_length=15)),
                ('base_tuition_fee', models.IntegerField()),
                ('insurance_fee', models.IntegerField()),
                ('examination_fee', models.IntegerField()),
                ('registration_fee', models.IntegerField()),
                ('gymkhana_fee', models.IntegerField()),
                ('medical_fee', models.IntegerField()),
                ('student_benevolent_fund', models.IntegerField()),
                ('lab_fee', models.IntegerField()),
                ('semester_mess_advance', models.IntegerField()),
                ('one_time_fee', models.IntegerField()),
                ('refundable_security_deposit', models.IntegerField()),
                ('accommodation_charges', models.IntegerField()),
                ('student_welfare_fund', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=255)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Payments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester', models.CharField(max_length=30)),
                ('date', models.DateField()),
                ('tuition_fee', models.IntegerField()),
                ('insurance_fee', models.IntegerField()),
                ('examination_fee', models.IntegerField()),
                ('registration_fee', models.IntegerField()),
                ('gymkhana_fee', models.IntegerField()),
                ('medical_fee', models.IntegerField()),
                ('student_benevolent_fund', models.IntegerField()),
                ('lab_fee', models.IntegerField()),
                ('semester_mess_advance', models.IntegerField()),
                ('one_time_fee', models.IntegerField()),
                ('refundable_security_deposit', models.IntegerField()),
                ('accommodation_charges', models.IntegerField()),
                ('student_welfare_fund', models.IntegerField()),
                ('fee_arrear', models.IntegerField()),
                ('mess_rebate', models.IntegerField()),
                ('fee_payable', models.IntegerField()),
                ('fee_received', models.IntegerField()),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_portal.students')),
            ],
        ),
        migrations.CreateModel(
            name='Variable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('value', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('isAdmin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FeeRemission',
            fields=[
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='remission', serialize=False, to='admin_portal.students')),
                ('percentage', models.CharField(choices=[('1', '1'), ('2/3', '2/3')], max_length=3)),
            ],
        ),
        migrations.CreateModel(
            name='PaymentComponents',
            fields=[
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='components', serialize=False, to='admin_portal.payments')),
                ('mode', models.CharField(max_length=20)),
                ('type', models.CharField(max_length=50)),
                ('utr', models.CharField(max_length=50)),
                ('amt', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='CurrentSemesterPayment',
            fields=[
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='admin_portal.students')),
                ('payment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='csempayment', to='admin_portal.payments')),
            ],
        ),
    ]
